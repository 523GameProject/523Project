/****************************************** *	玩家的管理类 *  	主要负责玩家的绘制和移动 *	@author : sherwin *  @date : 2012-03-08 *******************************************/function PlayerMgr() {		 this.left = 0;	 this.top = 0;	 // all players	 this.players = new Array();	 		 	// canvas context	this.ctx = getPlayerContext();		// image source	this.stopImages = new Array();	this.moveImages = new Array();	this.dieImages = new Array();	//image source for local player	this.stopImages2 = new Array();	this.moveImages2 = new Array();	this.dieImages2 = new Array();	//shadow image	this.shadowImage = null;}/***********************	prototype function ************************//****** public prototype function ************/// load all imagesPlayerMgr.prototype.loadResource = function(loader) {	var baseName = "img/player/";	var baseName2 = "img/player2/";	var imageExt = ".png";	var i = 0, j = 0;	// stand image	for(i = 0; i < 5; i++){		this.stopImages[i] = new Array();		this.stopImages2[i] = new Array();		for(j = 0; j < 6; j++) {			this.stopImages[i][j] = loader.addImage(baseName + "stop_" + (i * 6 + j).toString() + imageExt);			this.stopImages2[i][j] = loader.addImage(baseName2 + "stop_" + (i * 6 + j).toString() + imageExt);		}	}	this.stopImages[Direction.LEFT_UP] = this.stopImages[Direction.RIGHT_UP];	this.stopImages[Direction.LEFT] = this.stopImages[Direction.RIGHT];	this.stopImages[Direction.LEFT_DOWN] = this.stopImages[Direction.RIGHT_DOWN];		this.stopImages2[Direction.LEFT_UP] = this.stopImages2[Direction.RIGHT_UP];	this.stopImages2[Direction.LEFT] = this.stopImages2[Direction.RIGHT];	this.stopImages2[Direction.LEFT_DOWN] = this.stopImages2[Direction.RIGHT_DOWN];	// moving image	for(i = 0; i < 5; i++){		this.moveImages[i] = new Array();		this.moveImages2[i] = new Array();		for(j = 0; j < 6; j++) {			this.moveImages[i][j] = loader.addImage(baseName + "move_" + (1 + i * 6 + j).toString() + imageExt);			this.moveImages2[i][j] = loader.addImage(baseName2 + "move_" + (1 + i * 6 + j).toString() + imageExt);		}	}	this.moveImages[Direction.LEFT_UP] = this.moveImages[Direction.RIGHT_UP];	this.moveImages[Direction.LEFT] = this.moveImages[Direction.RIGHT];	this.moveImages[Direction.LEFT_DOWN] = this.moveImages[Direction.RIGHT_DOWN];		this.moveImages2[Direction.LEFT_UP] = this.moveImages2[Direction.RIGHT_UP];	this.moveImages2[Direction.LEFT] = this.moveImages2[Direction.RIGHT];	this.moveImages2[Direction.LEFT_DOWN] = this.moveImages2[Direction.RIGHT_DOWN];	// die image	for(i = 0; i < 5; i++){		this.dieImages[i] = new Array();		this.dieImages2[i] = new Array();		for(j = 0; j < 4; j++) {			this.dieImages[i][j] = loader.addImage(baseName + "die_" + (i * 4 + j).toString() + imageExt);			this.dieImages2[i][j] = loader.addImage(baseName2 + "die_" + (i * 4 + j).toString() + imageExt);		}	}	this.dieImages[Direction.LEFT_UP] = this.dieImages[Direction.RIGHT_UP];	this.dieImages[Direction.LEFT] = this.dieImages[Direction.RIGHT];	this.dieImages[Direction.LEFT_DOWN] = this.dieImages[Direction.RIGHT_DOWN];		this.dieImages2[Direction.LEFT_UP] = this.dieImages2[Direction.RIGHT_UP];	this.dieImages2[Direction.LEFT] = this.dieImages2[Direction.RIGHT];	this.dieImages2[Direction.LEFT_DOWN] = this.dieImages2[Direction.RIGHT_DOWN];		//shadow image	this.shadowImage = loader.addImage("img/effect/shadow.png");}PlayerMgr.prototype.start = function() {	}// add a new playerPlayerMgr.prototype.add = function(player) {	this.players.push(player);}PlayerMgr.prototype.remove = function(playerId) {	}// redraw all playersPlayerMgr.prototype.redraw = function() {	// clear canvas	this.ctx.clearRect(0, 0, 1200, 600);	// redraw all players one by one	for(var i = 0; i < this.players.length; i++)	{	    if(this.players[i].names=="")		{		    continue;		}		this.players[i].nextAction();		if(i==0)		{		    this._redrawPlayer(this.players[i],0);		}		else		{		    this._redrawPlayer(this.players[i],1);		}	}	this.PlayerList();}/******* private functions  **********/PlayerMgr.prototype._redrawPlayer = function(player,typ) {	var oppo = false;	if(player.direction > 4)		oppo = true;	var Image;	if(typ==0)//local player 	{	    switch(player.state){		    case PlayerState.STOP : 			   Image = this.stopImages2[player.direction][player.imageIndex];			   break;		    case PlayerState.MOVE :			   Image = this.moveImages2[player.direction][player.imageIndex];			   break;		    case PlayerState.DIE :			   Image = this.dieImages2[player.direction][player.imageIndex];			   break;	   }	}		else//other player	{	    switch(player.state){		    case PlayerState.STOP : 			   Image = this.stopImages[player.direction][player.imageIndex];			   break;		    case PlayerState.MOVE :			   Image = this.moveImages[player.direction][player.imageIndex];			   break;		    case PlayerState.DIE :			   Image = this.dieImages[player.direction][player.imageIndex];			   break;	    }	}	drawImage(this.ctx, Image, (player.pos.x  - this.left) * grid.width, (player.pos.y - this.top) * grid.height, oppo);	drawImage(this.ctx, this.shadowImage, (player.pos.x  - this.left) * grid.width, (player.pos.y - this.top) * grid.height + 10, false);	this.ctx.font="20px Verdana";    // create gradient	var c = document.getElementById("player");    var gradient=this.ctx.createLinearGradient(0,0,c.width,0);    gradient.addColorStop("0","magenta");    gradient.addColorStop("0.1","blue");    gradient.addColorStop("0.5","red");    // fill using gradient    this.ctx.fillStyle=gradient;	this.ctx.fillText(player.names,(player.pos.x  - this.left) * grid.width-15, (player.pos.y - this.top) * grid.height - 100);	this.ctx.lineWidth="1";	this.ctx.strokeStyle="#0000ff";    if(player.talk!="")	{	    this.ctx.strokeText(player.talk,(player.pos.x  - this.left) * grid.width+40, (player.pos.y - this.top) * grid.height - 60);	}	this.ctx.fillStyle="#000000";;	if(player.addPoint!=0)	{	    this.ctx.fillText(' + ' + player.addPoint,(player.pos.x  - this.left) * grid.width-15, (player.pos.y - this.top) * grid.height - 125);	}}PlayerMgr.prototype.PlayerList = function(){    //this.ctx.fillStyle="#ffffff";    //this.ctx.fillRect(this.left+10, this.top+10,100,200);    this.ctx.beginPath();    this.ctx.lineWidth="6";    this.ctx.strokeStyle="green";    this.ctx.rect(970, 20,200,150);      this.ctx.stroke();    this.ctx.fillStyle="#ff0000";;	for(var i=0;i<this.players.length; i++)	{	    if(this.players[i].names=="")		{		    continue;		}	    this.ctx.fillText(this.players[i].names +"    "+this.players[i].point,1000, 40+i*20);	}}function getPlayerContext(){	var canvas = document.getElementById("player");    var ctx = 0;	if (canvas.getContext) {		ctx = canvas.getContext("2d");	}	return ctx;}